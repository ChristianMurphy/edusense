Copyright (c) 2017-2019 Carnegie Mellon University. All rights reserved.
Use of this source code is governed by BSD 3-clause license.

7d6
< #define OPENPOSE_FLAGS_DISABLE_DISPLAY
12,15c11,12
< // Custom OpenPose flags
< // Display
< DEFINE_bool(no_display,                 false,
<     "Enable to disable the visual display.");
---
> // EduSense Dependencies
> #include <opencv2/opencv.hpp>
17,18c14,198
< // This worker will just read and return all the jpg files in a directory
< class WUserOutput : public op::WorkerConsumer<std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>>
---
> #include <boost/asio.hpp>
> #include <boost/asio/connect.hpp>
> #include <boost/date_time/posix_time/posix_time.hpp>
> #include <boost/date_time/posix_time/posix_time_io.hpp>
> #include <boost/date_time/local_time/local_time.hpp>
> #include <boost/date_time/time_zone_base.hpp>
> #include <boost/date_time/gregorian/gregorian.hpp>
> 
> #include "rapidjson/document.h"
> #include "rapidjson/writer.h"
> #include "rapidjson/stringbuffer.h"
> 
> #include "base64/base64.h"
> 
> namespace date_time = boost::date_time;
> namespace json = rapidjson;
> namespace local = boost::asio::local;
> namespace local_time = boost::local_time;
> namespace posix_time = boost::posix_time;
> 
> using boost::asio::ip::tcp;
> 
> // Custom EduSense flags
> DEFINE_bool(raw_image, false,
>             "Whether to stream raw image. if not set, only sends highly "
>             "compressed thumbnail");
> DEFINE_bool(use_unix_socket, false,
>             "Whether to use unix socket. if not set, use TCP");
> DEFINE_string(unix_socket, "",
>               "Socket address for IPC postprocessing pipeline");
> DEFINE_string(tcp_host, "",
>               "TCP host for tcp proprocessing pipeline");
> DEFINE_string(tcp_port, "",
>               "TCP port for tcp preprocessing pipeline");
> DEFINE_string(thumbnail_resolution, "240x135",
>               "Resolution for JPEG thumbnail");
> 
> struct UserDatum : public op::Datum {
>   posix_time::ptime timestamp;
> 
>   UserDatum() :
>     timestamp{posix_time::microsec_clock::universal_time()}
>   {}
> };
> 
> void parseDatum(bool rawFrame, std::shared_ptr<UserDatum> datum,
>                 std::string* str) {
>   json::StringBuffer s;
>   json::Writer<json::StringBuffer> writer(s);
>   writer.SetMaxDecimalPlaces(3);
> 
>   writer.StartObject();
>   std::string timestamp =
>     posix_time::to_iso_extended_string(datum->timestamp) + "Z";
> 
>   if (rawFrame) {
>     writer.Key("rawImage");
>     {
>       writer.StartObject();
> 
>       writer.Key("columns");
>       writer.Int(datum->cvInputData.cols);
> 
>       writer.Key("rows");
>       writer.Int(datum->cvInputData.rows);
> 
>       writer.Key("elemSize");
>       writer.Int(datum->cvInputData.elemSize());
> 
>       writer.Key("elemType");
>       writer.Int(datum->cvInputData.type());
> 
>       writer.Key("binary");
>       auto data = datum->cvInputData.data;
>       auto size = datum->cvInputData.dataend - datum->cvInputData.datastart;
>       std::string base64_image = base64_encode(data, size);
>       writer.String(base64_image.c_str());
> 
>       writer.EndObject();
>     }
>   } else {
>     writer.Key("thumbnail");
>     {
>       writer.StartObject();
> 
>       writer.Key("originalColumns");
>       writer.Int(datum->cvInputData.cols);
> 
>       writer.Key("originalRows");
>       writer.Int(datum->cvInputData.rows);
> 
>       writer.Key("binary");
>       std::string ext(".jpg");
>       std::vector<int> comp_params;
>       comp_params.push_back(CV_IMWRITE_JPEG_QUALITY);
>       comp_params.push_back(50);
> 
>       cv::Mat thumbnail;
>       op::Point<int> resolution =
>         op::flagsToPoint(FLAGS_thumbnail_resolution, "480x270");
>       cv::Size size(resolution.x, resolution.y);
>       cv::resize(datum->cvInputData, thumbnail, size);
> 
>       std::vector<uint8_t> buf;
>       cv::imencode(ext, thumbnail, buf, comp_params);
> 
>       std::string base64_image = base64_encode(buf.data(), buf.size());
>       writer.String(base64_image.c_str());
> 
>       writer.EndObject();
>     }
>   }
> 
>   writer.Key("people");
>   {
>     writer.StartArray();
> 
>     for (auto person = 0; person < datum->poseKeypoints.getSize(0); person++) {
>       writer.StartObject();
> 
>       writer.Key("body");
>       writer.StartArray();
>       const auto& poseKeypoints = datum->poseKeypoints;
>       for (auto bodyPart = 0; bodyPart < poseKeypoints.getSize(1); bodyPart++) {
>         writer.Uint(poseKeypoints[{person, bodyPart, 0}]);
>         writer.Uint(poseKeypoints[{person, bodyPart, 1}]);
>         writer.Double(poseKeypoints[{person, bodyPart, 2}]);
>       }
>       writer.EndArray();
> 
>       if (FLAGS_face) {
>         writer.Key("face");
>         writer.StartArray();
>         const auto& faceKeypoints = datum->faceKeypoints;
>         for (auto facePart = 0; facePart < faceKeypoints.getSize(1); facePart++) {
>           writer.Uint(faceKeypoints[{person, facePart, 0}]);
>           writer.Uint(faceKeypoints[{person, facePart, 1}]);
>           writer.Double(faceKeypoints[{person, facePart, 2}]);
>         }
>         writer.EndArray();
>       }
> 
>       if (FLAGS_hand) {
>         writer.Key("leftHand");
>         writer.StartArray();
>         const auto& leftHandKeypoints = datum->handKeypoints[0];
>         for (auto handPart = 0; handPart < leftHandKeypoints.getSize(1); handPart++) {
>           writer.Uint(leftHandKeypoints[{person, handPart, 0}]);
>           writer.Uint(leftHandKeypoints[{person, handPart, 1}]);
>           writer.Double(leftHandKeypoints[{person, handPart, 2}]);
>         }
>         writer.EndArray();
> 
>         writer.Key("rightHand");
>         writer.StartArray();
>         const auto& rightHandKeypoints = datum->handKeypoints[1];
>         for (auto handPart = 0; handPart < rightHandKeypoints.getSize(1); handPart++) {
>           writer.Uint(rightHandKeypoints[{person, handPart, 0}]);
>           writer.Uint(rightHandKeypoints[{person, handPart, 1}]);
>           writer.Double(rightHandKeypoints[{person, handPart, 2}]);
>         }
>         writer.EndArray();
>       }
> 
>       writer.Key("openposeId");
>       writer.Uint(person + 1);  // set openposeId start at 1
> 
>       writer.EndObject();
>     }
> 
>     writer.EndArray();
>   }
> 
>   writer.Key("frameNumber");
>   writer.Uint(datum->frameNumber + 1);  // openpose frame number starts at 0
>   writer.Key("timestamp");
>   writer.String(timestamp.c_str());
> 
>   writer.EndObject();
> 
>   *str = s.GetString();
> }
> 
> // This worker will just invert the image
> class WUserPostProcessing : public op::Worker<std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>>
20a201,205
>     WUserPostProcessing()
>     {
>         // User's constructor here
>     }
> 
23c208
<     void workConsumer(const std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>& datumsPtr)
---
>     void work(std::shared_ptr<std::vector<std::shared_ptr<op::Datum>>>& datumsPtr)
24a210,212
>         // User's post-processing (after OpenPose processing & before OpenPose outputs) here
>             // datumPtr->cvOutputData: rendered frame with pose or heatmaps
>             // datumPtr->poseKeypoints: Array<float> with the estimated pose
27,29d214
<             // User's displaying/saving/other processing here
<                 // datumPtr->cvOutputData: rendered frame with pose or heatmaps
<                 // datumPtr->poseKeypoints: Array<float> with the estimated pose
31,88c216,217
<             {
<                 // Show in command line the resulting pose keypoints for body, face and hands
<                 op::log("\nKeypoints:");
<                 // Accesing each element of the keypoints
<                 const auto& poseKeypoints = datumsPtr->at(0)->poseKeypoints;
<                 op::log("Person pose keypoints:");
<                 for (auto person = 0 ; person < poseKeypoints.getSize(0) ; person++)
<                 {
<                     op::log("Person " + std::to_string(person) + " (x, y, score):");
<                     for (auto bodyPart = 0 ; bodyPart < poseKeypoints.getSize(1) ; bodyPart++)
<                     {
<                         std::string valueToPrint;
<                         for (auto xyscore = 0 ; xyscore < poseKeypoints.getSize(2) ; xyscore++)
<                         {
<                             valueToPrint += std::to_string(   poseKeypoints[{person, bodyPart, xyscore}]   ) + " ";
<                         }
<                         op::log(valueToPrint);
<                     }
<                 }
<                 op::log(" ");
<                 // Alternative: just getting std::string equivalent
<                 op::log("Face keypoints: " + datumsPtr->at(0)->faceKeypoints.toString());
<                 op::log("Left hand keypoints: " + datumsPtr->at(0)->handKeypoints[0].toString());
<                 op::log("Right hand keypoints: " + datumsPtr->at(0)->handKeypoints[1].toString());
<                 // Heatmaps
<                 const auto& poseHeatMaps = datumsPtr->at(0)->poseHeatMaps;
<                 if (!poseHeatMaps.empty())
<                 {
<                     op::log("Pose heatmaps size: [" + std::to_string(poseHeatMaps.getSize(0)) + ", "
<                             + std::to_string(poseHeatMaps.getSize(1)) + ", "
<                             + std::to_string(poseHeatMaps.getSize(2)) + "]");
<                     const auto& faceHeatMaps = datumsPtr->at(0)->faceHeatMaps;
<                     op::log("Face heatmaps size: [" + std::to_string(faceHeatMaps.getSize(0)) + ", "
<                             + std::to_string(faceHeatMaps.getSize(1)) + ", "
<                             + std::to_string(faceHeatMaps.getSize(2)) + ", "
<                             + std::to_string(faceHeatMaps.getSize(3)) + "]");
<                     const auto& handHeatMaps = datumsPtr->at(0)->handHeatMaps;
<                     op::log("Left hand heatmaps size: [" + std::to_string(handHeatMaps[0].getSize(0)) + ", "
<                             + std::to_string(handHeatMaps[0].getSize(1)) + ", "
<                             + std::to_string(handHeatMaps[0].getSize(2)) + ", "
<                             + std::to_string(handHeatMaps[0].getSize(3)) + "]");
<                     op::log("Right hand heatmaps size: [" + std::to_string(handHeatMaps[1].getSize(0)) + ", "
<                             + std::to_string(handHeatMaps[1].getSize(1)) + ", "
<                             + std::to_string(handHeatMaps[1].getSize(2)) + ", "
<                             + std::to_string(handHeatMaps[1].getSize(3)) + "]");
<                 }
< 
<                 // Display results (if enabled)
<                 if (!FLAGS_no_display)
<                 {
<                     // Display rendered output image
<                     cv::imshow(OPEN_POSE_NAME_AND_VERSION + " - Tutorial C++ API", datumsPtr->at(0)->cvOutputData);
<                     // Display image and sleeps at least 1 ms (it usually sleeps ~5-10 msec to display the image)
<                     const char key = (char)cv::waitKey(1);
<                     if (key == 27)
<                         this->stop();
<                 }
<             }
---
>                 for (auto& datumPtr : *datumsPtr)
>                     cv::bitwise_not(datumPtr->cvOutputData, datumPtr->cvOutputData);
98c227,356
< void configureWrapper(op::Wrapper& opWrapper)
---
> // unix socket consumer
> using UserDatumVector =
>   std::shared_ptr<std::vector<std::shared_ptr<UserDatum>>>;
> class WUnixSocketOutput : public op::WorkerConsumer<UserDatumVector> {
>  public:
>   explicit WUnixSocketOutput(const std::string& address)
>     : op::WorkerConsumer<UserDatumVector>(), mAddress(address) {}
>   ~WUnixSocketOutput() {
>     uint32_t size = 0;
>     boost::asio::write(*mSocket, boost::asio::buffer(&size, sizeof(size)));
>     mSocket->close();
>     delete mSocket;
>     delete mEndpoint;
>   }
> 
>   void initializationOnThread() {
>     // The io context is required for all I/O
>     boost::asio::io_service ioc;
>     mEndpoint = new local::stream_protocol::endpoint(mAddress.c_str());
>     mSocket = new local::stream_protocol::socket(ioc);
> 
>     // retry 10 times
>     bool connected = false;
>     for (int i = 0; i < 30; i++) {
>       try {
>         mSocket->connect(*mEndpoint);
>         connected = true;
>         break;
>       } catch (const std::exception& e) {
>         std::this_thread::sleep_for(std::chrono::seconds(1));
>       }
>     }
> 
>     if (!connected) {
>       op::error("failed to establish connection to unix socket", __LINE__, __FUNCTION__, __FILE__);
>     }
>   }
> 
>   void workConsumer(const std::shared_ptr<std::vector<std::shared_ptr<UserDatum>>>& datumsPtr) {
>     try {
>       if (datumsPtr != nullptr && !datumsPtr->empty()) {
>         const auto profilerKey = op::Profiler::timerInit(__LINE__, __FUNCTION__, __FILE__);
> 
>         // Parse output into json
>         std::string parsedJsonStr;
>         parseDatum(FLAGS_raw_image, datumsPtr->at(0), &parsedJsonStr);
>         uint32_t size = parsedJsonStr.size();
>         boost::asio::write(*this->mSocket, boost::asio::buffer(&size, sizeof(size)));
>         boost::asio::write(*this->mSocket, boost::asio::buffer(parsedJsonStr.c_str(), parsedJsonStr.size()));
> 
>         op::Profiler::timerEnd(profilerKey);
>         op::Profiler::printAveragedTimeMsOnIterationX(profilerKey, __LINE__, __FUNCTION__, __FILE__);
>       }
>     } catch (const std::exception& e) {
>       this->stop();
>       op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
>     }
>   }
> 
>  private:
>   std::string mAddress;
>   local::stream_protocol::endpoint* mEndpoint;
>   local::stream_protocol::socket* mSocket;
> };
> 
> // tcp socket consumer
> class WTCPSocketOutput : public op::WorkerConsumer<UserDatumVector> {
>  public:
>   explicit WTCPSocketOutput(const std::string& host, const std::string& port)
>     : op::WorkerConsumer<UserDatumVector>(), mHost(host), mPort(port) {}
>   ~WTCPSocketOutput() {
>     uint32_t size = 0;
>     boost::asio::write(*this->mSocket, boost::asio::buffer(&size, sizeof(size)));
>     mSocket->close();
>     delete mSocket;
>   }
> 
>   void initializationOnThread() {
>     // The io context is required for all I/O
>     boost::asio::io_service ioc;
> 
>     mSocket = new tcp::socket(ioc);
>     mResolver = new tcp::resolver(ioc);
> 
>     // retry 10 times
>     bool connected = false;
>     for (int i = 0; i < 30; i++) {
>       try {
>         boost::asio::connect(*mSocket, mResolver->resolve({mHost, mPort}));
>         connected = true;
>         break;
>       } catch (const std::exception& e) {
>         std::this_thread::sleep_for(std::chrono::seconds(1));
>       }
>     }
> 
>     if (!connected) {
>       op::error("failed to establish connection to tcp socket", __LINE__, __FUNCTION__, __FILE__);
>     }
>   }
> 
>   void workConsumer(const std::shared_ptr<std::vector<std::shared_ptr<UserDatum>>>& datumsPtr) {
>     try {
>       if (datumsPtr != nullptr && !datumsPtr->empty()) {
>         const auto profilerKey = op::Profiler::timerInit(__LINE__, __FUNCTION__, __FILE__);
> 
>         // Parse output into json
>         std::string parsedJsonStr;
>         parseDatum(FLAGS_raw_image, datumsPtr->at(0), &parsedJsonStr);
>         uint32_t size = parsedJsonStr.size();
>         boost::asio::write(*mSocket, boost::asio::buffer(&size, sizeof(size)));
>         boost::asio::write(*mSocket, boost::asio::buffer(parsedJsonStr.c_str(), parsedJsonStr.size()));
> 
>         op::Profiler::timerEnd(profilerKey);
>         op::Profiler::printAveragedTimeMsOnIterationX(profilerKey, __LINE__, __FUNCTION__, __FILE__);
>       }
>     } catch (const std::exception& e) {
>       this->stop();
>       op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
>     }
>   }
> 
>  private:
>   std::string mHost;
>   std::string mPort;
>   tcp::socket* mSocket;
>   tcp::resolver* mResolver;
> };
> 
> void configureWrapper(op::WrapperT<UserDatum>& opWrapper)
149,150c407,415
<         // GUI (Display)
<         auto wUserOutput = std::make_shared<WUserOutput>();
---
>         std::shared_ptr<op::WorkerConsumer<UserDatumVector>> wUserOutput;
> 
>         // Processing
>         if (FLAGS_use_unix_socket) {
>           wUserOutput = std::make_shared<WUnixSocketOutput>(FLAGS_unix_socket);
>         } else {
>           wUserOutput = std::make_shared<WTCPSocketOutput>(FLAGS_tcp_host, FLAGS_tcp_port);
>         }
> 
152,153c417,418
<         const auto workerOutputOnNewThread = true;
<         opWrapper.setWorker(op::WorkerType::Output, wUserOutput, workerOutputOnNewThread);
---
>         const auto workerProcessingOnNewThread = true;
>         opWrapper.setWorker(op::WorkerType::Output, wUserOutput, workerProcessingOnNewThread);
194c459,462
<         // No GUI. Equivalent to: opWrapper.configure(op::WrapperStructGui{});
---
>         // GUI (comment or use default argument to disable any visual output)
>         const op::WrapperStructGui wrapperStructGui{
>             op::flagsToDisplayMode(FLAGS_display, FLAGS_3d), !FLAGS_no_gui_verbose, FLAGS_fullscreen};
>         opWrapper.configure(wrapperStructGui);
214c482
<         op::Wrapper opWrapper;
---
>         op::WrapperT<UserDatum> opWrapper;
